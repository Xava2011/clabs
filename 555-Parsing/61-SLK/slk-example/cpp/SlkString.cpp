
// SlkString.cpp - generated by the SLK parser generator 

#include "SlkParse.h"

static char *Nonterminal_name[]={"0"

,"expression"
,"additive_expression"
,"add_op"
,"multiplicitive_expression"
,"mul_op"
,"exponential_expression"
,"primary_expression"
,"add_op_multiplicitive_expression_*"
,"mul_op_exponential_expression_*"
,"^_exponential_expression_opt"
};

static char *Terminal_name[]={"0"

,"+"
,"-"
,"*"
,"/"
,"^"
,"("
,")"
,"NUMBER"
,"END_OF_SLK_INPUT_"
};

static char *Action_name[] = {"0"

,"_action_Finish"
,"_action_Push"
,"_action_Add"
,"_action_Multiply"
,"_action_Exponent"
,"_action_Negate"
};

static char *Production_name[] = {"0"

,"expression --> additive_expression _action_Finish"
,"additive_expression --> multiplicitive_expression add_op_multiplicitive_expression_*"
,"add_op --> +"
,"add_op --> -"
,"multiplicitive_expression --> exponential_expression mul_op_exponential_expression_*"
,"mul_op --> *"
,"mul_op --> /"
,"exponential_expression --> primary_expression ^_exponential_expression_opt"
,"primary_expression --> ( additive_expression )"
,"primary_expression --> - primary_expression _action_Negate"
,"primary_expression --> NUMBER _action_Push"
,"add_op_multiplicitive_expression_* --> add_op _action_Push multiplicitive_expression _action_Add add_op_multiplicitive_expression_*"
,"add_op_multiplicitive_expression_* -->"
,"mul_op_exponential_expression_* --> mul_op _action_Push exponential_expression _action_Multiply mul_op_exponential_expression_*"
,"mul_op_exponential_expression_* -->"
,"^_exponential_expression_opt --> ^ exponential_expression _action_Exponent"
,"^_exponential_expression_opt -->"
};

#undef  START_SYMBOL 
#define START_SYMBOL 2049

#undef  GET_NONTERMINAL_NAME
#undef  GET_TERMINAL_NAME
#undef  GET_ACTION_NAME
#undef  GET_PRODUCTION_NAME

#define GET_NONTERMINAL_NAME(symbol) (Nonterminal_name [symbol - (START_SYMBOL-1)])
#define GET_TERMINAL_NAME(symbol) (Terminal_name [SlkGetTerminalIndex (symbol)])
#define GET_ACTION_NAME(symbol) (Action_name [-(symbol)])
#define GET_PRODUCTION_NAME(number) (Production_name [number])

char *SlkGetSymbolName ( short symbol )
{ if ( symbol >= START_SYMBOL ) {
      return ( GET_NONTERMINAL_NAME (symbol) );
  } else if ( symbol > 0 ) {
      return ( GET_TERMINAL_NAME (symbol) );
  } else {
      return ( GET_ACTION_NAME (symbol) );
  }
}

char *SlkGetProductionName ( short  production_number )
{
  return ( GET_PRODUCTION_NAME (production_number) );
}

